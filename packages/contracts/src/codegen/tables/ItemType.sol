// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("ItemType")));
bytes32 constant ItemTypeTableId = _tableId;

struct ItemTypeData {
  int32 dCoin;
  int32 dAffinity;
  bool stealable;
}

library ItemType {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](3);
    _schema[0] = SchemaType.INT32;
    _schema[1] = SchemaType.INT32;
    _schema[2] = SchemaType.BOOL;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.UINT32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](3);
    _fieldNames[0] = "dCoin";
    _fieldNames[1] = "dAffinity";
    _fieldNames[2] = "stealable";
    return ("ItemType", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get dCoin */
  function getDCoin(uint32 id) internal view returns (int32 dCoin) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Get dCoin (using the specified store) */
  function getDCoin(IStore _store, uint32 id) internal view returns (int32 dCoin) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Set dCoin */
  function setDCoin(uint32 id, int32 dCoin) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((dCoin)));
  }

  /** Set dCoin (using the specified store) */
  function setDCoin(IStore _store, uint32 id, int32 dCoin) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((dCoin)));
  }

  /** Get dAffinity */
  function getDAffinity(uint32 id) internal view returns (int32 dAffinity) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Get dAffinity (using the specified store) */
  function getDAffinity(IStore _store, uint32 id) internal view returns (int32 dAffinity) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Set dAffinity */
  function setDAffinity(uint32 id, int32 dAffinity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((dAffinity)));
  }

  /** Set dAffinity (using the specified store) */
  function setDAffinity(IStore _store, uint32 id, int32 dAffinity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((dAffinity)));
  }

  /** Get stealable */
  function getStealable(uint32 id) internal view returns (bool stealable) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Get stealable (using the specified store) */
  function getStealable(IStore _store, uint32 id) internal view returns (bool stealable) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Set stealable */
  function setStealable(uint32 id, bool stealable) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((stealable)));
  }

  /** Set stealable (using the specified store) */
  function setStealable(IStore _store, uint32 id, bool stealable) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((stealable)));
  }

  /** Get the full data */
  function get(uint32 id) internal view returns (ItemTypeData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, uint32 id) internal view returns (ItemTypeData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(uint32 id, int32 dCoin, int32 dAffinity, bool stealable) internal {
    bytes memory _data = encode(dCoin, dAffinity, stealable);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(IStore _store, uint32 id, int32 dCoin, int32 dAffinity, bool stealable) internal {
    bytes memory _data = encode(dCoin, dAffinity, stealable);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(uint32 id, ItemTypeData memory _table) internal {
    set(id, _table.dCoin, _table.dAffinity, _table.stealable);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, uint32 id, ItemTypeData memory _table) internal {
    set(_store, id, _table.dCoin, _table.dAffinity, _table.stealable);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (ItemTypeData memory _table) {
    _table.dCoin = (int32(uint32(Bytes.slice4(_blob, 0))));

    _table.dAffinity = (int32(uint32(Bytes.slice4(_blob, 4))));

    _table.stealable = (_toBool(uint8(Bytes.slice1(_blob, 8))));
  }

  /** Tightly pack full data using this table's schema */
  function encode(int32 dCoin, int32 dAffinity, bool stealable) internal view returns (bytes memory) {
    return abi.encodePacked(dCoin, dAffinity, stealable);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(uint32 id) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));
  }

  /* Delete all data for given keys */
  function deleteRecord(uint32 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, uint32 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}

function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
